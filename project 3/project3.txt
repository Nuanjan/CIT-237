#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include "InventoryItem.h"

using namespace std;

//====== Global variables======//
// keeps track of inventory number
int invCount = 0;

//====== Function Prototypes======//
int readFromFile(string , InventoryItem []);
void displayMenu(InventoryItem []);
void addParts(InventoryItem []);
void removeParts(InventoryItem []);
void inputInventory(InventoryItem []);
void newInventory(InventoryItem []);
void outputInventory(InventoryItem []);
void printInventory(InventoryItem []);
void printHelp();
void quit();

//====== Main entry======//
int main()
{
    InventoryItem inventory[100];

    displayMenu(inventory);

    return 0;
}

void displayMenu(InventoryItem inv[])
{
    char inputCmd = 0;
    for(;;)
    {
        cout << "Command: ";
        cin >> inputCmd;
        cout << endl;
        
        switch (inputCmd)
        {
            case 'a':
                addParts(inv);
                break;
            case 'h':
                printHelp();
                break;
            case 'i':
                inputInventory(inv);
                break;
            case 'p':
                printInventory(inv);
                break;
            case 'n':
                newInventory(inv);
                break;
            case 'o':
                outputInventory(inv);
                break;
            case 'q':
                quit();
                break;
            case 'r':
                removeParts(inv);
                break;
            default:
                break;
        }
    
    }
}

int readFromFile(string filename, InventoryItem inventory[])
{
    ifstream inputFile(filename);
    if (!inputFile.is_open())
    {
        return -1;
    }

    string buffer;
    int counter = 0;
    int arrayIndexer = invCount;
    int invAdded = 0;

    while (getline(inputFile, buffer, '|'))
    {
        if (counter == 1)
        {
            inventory[arrayIndexer].setDescription(buffer);
        }
        else if (counter == 2)
        {
            inventory[arrayIndexer].setCost(atof(buffer.c_str()));
        }
        else if (counter == 3) 
        {
            inventory[arrayIndexer].setUnits(atoi(buffer.c_str()));
        }

        // reset at the end of the line preparing for next one
        if (counter == 3)
        {
            invCount++;
            arrayIndexer++;
            counter = 0;
            invAdded++;
        }

        counter++;
    }

    inputFile.close();

    return invAdded;
}

void addParts(InventoryItem inv[])
{

}

void removeParts(InventoryItem inv[])
{
    int itemNumber;
    int numToRemove;

    cout << "Choose a Item Number: ";
    cin >> itemNumber;
    cout << "How many parts to remove? ";
    cin >> numToRemove;

    // calculate removal
    int remainder = inv[itemNumber].getUnits() - numToRemove;
    if (remainder < 0)
    {
        cout << "Error:  You are attempting to remove more "
             << "parts than the Item currently holds." << endl;
    }
    else
    {
        inv[itemNumber].setUnits(remainder);
    }
}

void inputInventory(InventoryItem inv[])
{
    string filename;
    cout << "Enter name of input file: ";
    cin >> filename;

    int count = readFromFile(filename, inv);
    if (count == -1)
    {
        cout << "Error opening file" << endl;
        return;
    }
    else
    {
        cout<< count << " records loaded to array." << endl;
    }
}

void newInventory(InventoryItem inv[])
{

}

void outputInventory(InventoryItem inv[])
{

}

void printInventory(InventoryItem inv[])
{
    // print header
    cout << left << setw(14) << "Item Num";
    cout << setw(40) << "Description";
    cout << setw(14) << "Cost";
    cout << setw(14) << "Quantity" << endl;
    cout << setw(14) << "--------";
    cout << setw(40) << "-----------";
    cout << setw(14) << "----";
    cout << setw(14) << "--------" << endl;
    // print inventory
    for (int i = 0; i < invCount; i++)
    {
        cout << left;
        cout << setw(8) << i;
        cout << setw(40) << left << inv[i].getDescription();
        cout << fixed << showpoint;
        cout << right;
        cout << setprecision(2);
        cout << setw(6) << inv[i].getCost();
        cout << setprecision(0);
        cout << setw(5) << inv[i].getUnits() << endl;
    }

    cout << invCount + 1 << "records." << endl;
}

void printHelp()
{

}

void quit()
{
    exit(0);
}